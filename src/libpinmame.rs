/* automatically generated by rust-bindgen 0.69.2 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 1;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 38;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const PINMAME_MAX_PATH: u32 = 512;
pub const PINMAME_MAX_MECHSW: u32 = 20;
pub const PINMAME_ACCUMULATOR_SAMPLES: u32 = 8192;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub const PINMAME_LOG_LEVEL_PINMAME_LOG_LEVEL_DEBUG: PINMAME_LOG_LEVEL = 0;
pub const PINMAME_LOG_LEVEL_PINMAME_LOG_LEVEL_INFO: PINMAME_LOG_LEVEL = 1;
pub const PINMAME_LOG_LEVEL_PINMAME_LOG_LEVEL_ERROR: PINMAME_LOG_LEVEL = 2;
pub type PINMAME_LOG_LEVEL = ::std::os::raw::c_uint;
pub const PINMAME_STATUS_PINMAME_STATUS_OK: PINMAME_STATUS = 0;
pub const PINMAME_STATUS_PINMAME_STATUS_CONFIG_NOT_SET: PINMAME_STATUS = 1;
pub const PINMAME_STATUS_PINMAME_STATUS_GAME_NOT_FOUND: PINMAME_STATUS = 2;
pub const PINMAME_STATUS_PINMAME_STATUS_GAME_ALREADY_RUNNING: PINMAME_STATUS = 3;
pub const PINMAME_STATUS_PINMAME_STATUS_EMULATOR_NOT_RUNNING: PINMAME_STATUS = 4;
pub const PINMAME_STATUS_PINMAME_STATUS_MECH_HANDLE_MECHANICS: PINMAME_STATUS = 5;
pub const PINMAME_STATUS_PINMAME_STATUS_MECH_NO_INVALID: PINMAME_STATUS = 6;
pub type PINMAME_STATUS = ::std::os::raw::c_uint;
pub const PINMAME_FILE_TYPE_PINMAME_FILE_TYPE_ROMS: PINMAME_FILE_TYPE = 0;
pub const PINMAME_FILE_TYPE_PINMAME_FILE_TYPE_NVRAM: PINMAME_FILE_TYPE = 1;
pub const PINMAME_FILE_TYPE_PINMAME_FILE_TYPE_SAMPLES: PINMAME_FILE_TYPE = 2;
pub const PINMAME_FILE_TYPE_PINMAME_FILE_TYPE_CONFIG: PINMAME_FILE_TYPE = 3;
pub const PINMAME_FILE_TYPE_PINMAME_FILE_TYPE_HIGHSCORE: PINMAME_FILE_TYPE = 4;
pub type PINMAME_FILE_TYPE = ::std::os::raw::c_uint;
pub const PINMAME_DMD_MODE_PINMAME_DMD_MODE_BRIGHTNESS: PINMAME_DMD_MODE = 0;
pub const PINMAME_DMD_MODE_PINMAME_DMD_MODE_RAW: PINMAME_DMD_MODE = 1;
pub type PINMAME_DMD_MODE = ::std::os::raw::c_uint;
pub const PINMAME_SOUND_MODE_PINMAME_SOUND_MODE_DEFAULT: PINMAME_SOUND_MODE = 0;
pub const PINMAME_SOUND_MODE_PINMAME_SOUND_MODE_ALTSOUND: PINMAME_SOUND_MODE = 1;
pub type PINMAME_SOUND_MODE = ::std::os::raw::c_uint;
pub const PINMAME_AUDIO_FORMAT_PINMAME_AUDIO_FORMAT_INT16: PINMAME_AUDIO_FORMAT = 0;
pub const PINMAME_AUDIO_FORMAT_PINMAME_AUDIO_FORMAT_FLOAT: PINMAME_AUDIO_FORMAT = 1;
pub type PINMAME_AUDIO_FORMAT = ::std::os::raw::c_uint;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG16: PINMAME_DISPLAY_TYPE = 0;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG16R: PINMAME_DISPLAY_TYPE = 1;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG10: PINMAME_DISPLAY_TYPE = 2;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG9: PINMAME_DISPLAY_TYPE = 3;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG8: PINMAME_DISPLAY_TYPE = 4;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG8D: PINMAME_DISPLAY_TYPE = 5;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG7: PINMAME_DISPLAY_TYPE = 6;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG87: PINMAME_DISPLAY_TYPE = 7;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG87F: PINMAME_DISPLAY_TYPE = 8;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG98: PINMAME_DISPLAY_TYPE = 9;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG98F: PINMAME_DISPLAY_TYPE = 10;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG7S: PINMAME_DISPLAY_TYPE = 11;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG7SC: PINMAME_DISPLAY_TYPE = 12;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG16S: PINMAME_DISPLAY_TYPE = 13;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_DMD: PINMAME_DISPLAY_TYPE = 14;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_VIDEO: PINMAME_DISPLAY_TYPE = 15;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG16N: PINMAME_DISPLAY_TYPE = 16;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG16D: PINMAME_DISPLAY_TYPE = 17;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEGALL: PINMAME_DISPLAY_TYPE = 31;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_IMPORT: PINMAME_DISPLAY_TYPE = 32;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEGMASK: PINMAME_DISPLAY_TYPE = 63;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEGHIBIT: PINMAME_DISPLAY_TYPE = 64;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEGREV: PINMAME_DISPLAY_TYPE = 128;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_DMDNOAA: PINMAME_DISPLAY_TYPE = 256;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_NODISP: PINMAME_DISPLAY_TYPE = 512;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_DMDSEG: PINMAME_DISPLAY_TYPE = 1024;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG8H: PINMAME_DISPLAY_TYPE = 68;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG7H: PINMAME_DISPLAY_TYPE = 70;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG87H: PINMAME_DISPLAY_TYPE = 71;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG87FH: PINMAME_DISPLAY_TYPE = 72;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG7SH: PINMAME_DISPLAY_TYPE = 75;
pub const PINMAME_DISPLAY_TYPE_PINMAME_DISPLAY_TYPE_SEG7SCH: PINMAME_DISPLAY_TYPE = 76;
pub type PINMAME_DISPLAY_TYPE = ::std::os::raw::c_uint;
pub const PINMAME_MOD_OUTPUT_TYPE_PINMAME_MOD_OUTPUT_TYPE_SOLENOID: PINMAME_MOD_OUTPUT_TYPE = 0;
pub const PINMAME_MOD_OUTPUT_TYPE_PINMAME_MOD_OUTPUT_TYPE_LAMP: PINMAME_MOD_OUTPUT_TYPE = 1;
pub const PINMAME_MOD_OUTPUT_TYPE_PINMAME_MOD_OUTPUT_TYPE_GI: PINMAME_MOD_OUTPUT_TYPE = 2;
pub const PINMAME_MOD_OUTPUT_TYPE_PINMAME_MOD_OUTPUT_TYPE_ALPHASEG: PINMAME_MOD_OUTPUT_TYPE = 3;
pub type PINMAME_MOD_OUTPUT_TYPE = ::std::os::raw::c_uint;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_WPCALPHA_1: PINMAME_HARDWARE_GEN = 1;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_WPCALPHA_2: PINMAME_HARDWARE_GEN = 2;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_WPCDMD: PINMAME_HARDWARE_GEN = 4;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_WPCFLIPTRON: PINMAME_HARDWARE_GEN = 8;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_WPCDCS: PINMAME_HARDWARE_GEN = 16;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_WPCSECURITY: PINMAME_HARDWARE_GEN = 32;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_WPC95DCS: PINMAME_HARDWARE_GEN = 64;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_WPC95: PINMAME_HARDWARE_GEN = 128;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_S11: PINMAME_HARDWARE_GEN = 2147483648;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_S11X: PINMAME_HARDWARE_GEN = 256;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_S11A: PINMAME_HARDWARE_GEN = 256;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_S11B: PINMAME_HARDWARE_GEN = 256;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_S11B2: PINMAME_HARDWARE_GEN = 512;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_S11C: PINMAME_HARDWARE_GEN = 1024;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_S9: PINMAME_HARDWARE_GEN = 2048;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_DE: PINMAME_HARDWARE_GEN = 4096;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_DEDMD16: PINMAME_HARDWARE_GEN = 8192;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_DEDMD32: PINMAME_HARDWARE_GEN = 16384;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_DEDMD64: PINMAME_HARDWARE_GEN = 32768;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_S7: PINMAME_HARDWARE_GEN = 65536;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_S6: PINMAME_HARDWARE_GEN = 131072;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_S4: PINMAME_HARDWARE_GEN = 262144;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_S3C: PINMAME_HARDWARE_GEN = 524288;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_S3: PINMAME_HARDWARE_GEN = 1048576;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_BY17: PINMAME_HARDWARE_GEN = 2097152;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_BY35: PINMAME_HARDWARE_GEN = 4194304;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_STMPU100: PINMAME_HARDWARE_GEN = 8388608;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_STMPU200: PINMAME_HARDWARE_GEN = 16777216;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_ASTRO: PINMAME_HARDWARE_GEN = 33554432;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_HNK: PINMAME_HARDWARE_GEN = 67108864;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_BYPROTO: PINMAME_HARDWARE_GEN = 134217728;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_BY6803: PINMAME_HARDWARE_GEN = 268435456;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_BY6803A: PINMAME_HARDWARE_GEN = 536870912;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_BOWLING: PINMAME_HARDWARE_GEN = 1073741824;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_GTS1: PINMAME_HARDWARE_GEN = 4294967296;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_GTS80: PINMAME_HARDWARE_GEN = 8589934592;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_GTS80A: PINMAME_HARDWARE_GEN = 8589934592;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_GTS80B: PINMAME_HARDWARE_GEN = 17179869184;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_WS: PINMAME_HARDWARE_GEN = 274877906944;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_WS_1: PINMAME_HARDWARE_GEN = 549755813888;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_WS_2: PINMAME_HARDWARE_GEN = 1099511627776;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_GTS3: PINMAME_HARDWARE_GEN = 2199023255552;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_ZAC1: PINMAME_HARDWARE_GEN = 4398046511104;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_ZAC2: PINMAME_HARDWARE_GEN = 8796093022208;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_SAM: PINMAME_HARDWARE_GEN = 17592186044416;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_ALVG: PINMAME_HARDWARE_GEN = 35184372088832;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_ALVG_DMD2: PINMAME_HARDWARE_GEN =
    70368744177664;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_MRGAME: PINMAME_HARDWARE_GEN = 140737488355328;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_SLEIC: PINMAME_HARDWARE_GEN = 281474976710656;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_WICO: PINMAME_HARDWARE_GEN = 562949953421312;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_SPA: PINMAME_HARDWARE_GEN = 1125899906842624;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_ALLWPC: PINMAME_HARDWARE_GEN = 255;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_ALLS11: PINMAME_HARDWARE_GEN = 2147548928;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_ALLBY35: PINMAME_HARDWARE_GEN = 1205862400;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_ALLS80: PINMAME_HARDWARE_GEN = 25769803776;
pub const PINMAME_HARDWARE_GEN_PINMAME_HARDWARE_GEN_LLWS: PINMAME_HARDWARE_GEN = 1924145348608;
pub type PINMAME_HARDWARE_GEN = u64;
pub const PINMAME_GAME_DRIVER_FLAGS_PINMAME_GAME_DRIVER_FLAGS_ORIENTATION_MASK:
    PINMAME_GAME_DRIVER_FLAGS = 7;
pub const PINMAME_GAME_DRIVER_FLAGS_PINMAME_GAME_DRIVER_FLAGS_ORIENTATION_FLIP_X:
    PINMAME_GAME_DRIVER_FLAGS = 1;
pub const PINMAME_GAME_DRIVER_FLAGS_PINMAME_GAME_DRIVER_FLAGS_ORIENTATION_FLIP_Y:
    PINMAME_GAME_DRIVER_FLAGS = 2;
pub const PINMAME_GAME_DRIVER_FLAGS_PINMAME_GAME_DRIVER_FLAGS_ORIENTATION_SWAP_XY:
    PINMAME_GAME_DRIVER_FLAGS = 4;
pub const PINMAME_GAME_DRIVER_FLAGS_PINMAME_GAME_DRIVER_FLAGS_GAME_NOT_WORKING:
    PINMAME_GAME_DRIVER_FLAGS = 8;
pub const PINMAME_GAME_DRIVER_FLAGS_PINMAME_GAME_DRIVER_FLAGS_GAME_UNEMULATED_PROTECTION:
    PINMAME_GAME_DRIVER_FLAGS = 16;
pub const PINMAME_GAME_DRIVER_FLAGS_PINMAME_GAME_DRIVER_FLAGS_GAME_WRONG_COLORS:
    PINMAME_GAME_DRIVER_FLAGS = 32;
pub const PINMAME_GAME_DRIVER_FLAGS_PINMAME_GAME_DRIVER_FLAGS_GAME_IMPERFECT_COLORS:
    PINMAME_GAME_DRIVER_FLAGS = 64;
pub const PINMAME_GAME_DRIVER_FLAGS_PINMAME_GAME_DRIVER_FLAGS_GAME_IMPERFECT_GRAPHICS:
    PINMAME_GAME_DRIVER_FLAGS = 128;
pub const PINMAME_GAME_DRIVER_FLAGS_PINMAME_GAME_DRIVER_FLAGS_GAME_NO_COCKTAIL:
    PINMAME_GAME_DRIVER_FLAGS = 256;
pub const PINMAME_GAME_DRIVER_FLAGS_PINMAME_GAME_DRIVER_FLAGS_GAME_NO_SOUND:
    PINMAME_GAME_DRIVER_FLAGS = 512;
pub const PINMAME_GAME_DRIVER_FLAGS_PINMAME_GAME_DRIVER_FLAGS_GAME_IMPERFECT_SOUND:
    PINMAME_GAME_DRIVER_FLAGS = 1024;
pub const PINMAME_GAME_DRIVER_FLAGS_PINMAME_GAME_DRIVER_FLAGS_NOT_A_DRIVER:
    PINMAME_GAME_DRIVER_FLAGS = 16384;
pub type PINMAME_GAME_DRIVER_FLAGS = ::std::os::raw::c_uint;
pub const PINMAME_MECH_FLAGS_PINMAME_MECH_FLAGS_LINEAR: PINMAME_MECH_FLAGS = 0;
pub const PINMAME_MECH_FLAGS_PINMAME_MECH_FLAGS_NONLINEAR: PINMAME_MECH_FLAGS = 1;
pub const PINMAME_MECH_FLAGS_PINMAME_MECH_FLAGS_CIRCLE: PINMAME_MECH_FLAGS = 0;
pub const PINMAME_MECH_FLAGS_PINMAME_MECH_FLAGS_STOPEND: PINMAME_MECH_FLAGS = 2;
pub const PINMAME_MECH_FLAGS_PINMAME_MECH_FLAGS_REVERSE: PINMAME_MECH_FLAGS = 4;
pub const PINMAME_MECH_FLAGS_PINMAME_MECH_FLAGS_ONESOL: PINMAME_MECH_FLAGS = 0;
pub const PINMAME_MECH_FLAGS_PINMAME_MECH_FLAGS_ONEDIRSOL: PINMAME_MECH_FLAGS = 16;
pub const PINMAME_MECH_FLAGS_PINMAME_MECH_FLAGS_TWODIRSOL: PINMAME_MECH_FLAGS = 32;
pub const PINMAME_MECH_FLAGS_PINMAME_MECH_FLAGS_TWOSTEPSOL: PINMAME_MECH_FLAGS = 64;
pub const PINMAME_MECH_FLAGS_PINMAME_MECH_FLAGS_FOURSTEPSOL: PINMAME_MECH_FLAGS = 96;
pub const PINMAME_MECH_FLAGS_PINMAME_MECH_FLAGS_SLOW: PINMAME_MECH_FLAGS = 0;
pub const PINMAME_MECH_FLAGS_PINMAME_MECH_FLAGS_FAST: PINMAME_MECH_FLAGS = 128;
pub const PINMAME_MECH_FLAGS_PINMAME_MECH_FLAGS_STEPSW: PINMAME_MECH_FLAGS = 0;
pub const PINMAME_MECH_FLAGS_PINMAME_MECH_FLAGS_LENGTHSW: PINMAME_MECH_FLAGS = 256;
pub type PINMAME_MECH_FLAGS = ::std::os::raw::c_uint;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_A: PINMAME_KEYCODE = 0;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_B: PINMAME_KEYCODE = 1;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_C: PINMAME_KEYCODE = 2;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_D: PINMAME_KEYCODE = 3;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_E: PINMAME_KEYCODE = 4;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_F: PINMAME_KEYCODE = 5;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_G: PINMAME_KEYCODE = 6;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_H: PINMAME_KEYCODE = 7;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_I: PINMAME_KEYCODE = 8;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_J: PINMAME_KEYCODE = 9;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_K: PINMAME_KEYCODE = 10;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_L: PINMAME_KEYCODE = 11;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_M: PINMAME_KEYCODE = 12;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_N: PINMAME_KEYCODE = 13;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_O: PINMAME_KEYCODE = 14;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_P: PINMAME_KEYCODE = 15;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_Q: PINMAME_KEYCODE = 16;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_R: PINMAME_KEYCODE = 17;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_S: PINMAME_KEYCODE = 18;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_T: PINMAME_KEYCODE = 19;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_U: PINMAME_KEYCODE = 20;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_V: PINMAME_KEYCODE = 21;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_W: PINMAME_KEYCODE = 22;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_X: PINMAME_KEYCODE = 23;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_Y: PINMAME_KEYCODE = 24;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_Z: PINMAME_KEYCODE = 25;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_NUMBER_0: PINMAME_KEYCODE = 26;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_NUMBER_1: PINMAME_KEYCODE = 27;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_NUMBER_2: PINMAME_KEYCODE = 28;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_NUMBER_3: PINMAME_KEYCODE = 29;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_NUMBER_4: PINMAME_KEYCODE = 30;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_NUMBER_5: PINMAME_KEYCODE = 31;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_NUMBER_6: PINMAME_KEYCODE = 32;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_NUMBER_7: PINMAME_KEYCODE = 33;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_NUMBER_8: PINMAME_KEYCODE = 34;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_NUMBER_9: PINMAME_KEYCODE = 35;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_KEYPAD_0: PINMAME_KEYCODE = 36;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_KEYPAD_1: PINMAME_KEYCODE = 37;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_KEYPAD_2: PINMAME_KEYCODE = 38;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_KEYPAD_3: PINMAME_KEYCODE = 39;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_KEYPAD_4: PINMAME_KEYCODE = 40;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_KEYPAD_5: PINMAME_KEYCODE = 41;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_KEYPAD_6: PINMAME_KEYCODE = 42;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_KEYPAD_7: PINMAME_KEYCODE = 43;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_KEYPAD_8: PINMAME_KEYCODE = 44;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_KEYPAD_9: PINMAME_KEYCODE = 45;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_F1: PINMAME_KEYCODE = 46;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_F2: PINMAME_KEYCODE = 47;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_F3: PINMAME_KEYCODE = 48;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_F4: PINMAME_KEYCODE = 49;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_F5: PINMAME_KEYCODE = 50;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_F6: PINMAME_KEYCODE = 51;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_F7: PINMAME_KEYCODE = 52;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_F8: PINMAME_KEYCODE = 53;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_F9: PINMAME_KEYCODE = 54;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_F10: PINMAME_KEYCODE = 55;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_F11: PINMAME_KEYCODE = 56;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_F12: PINMAME_KEYCODE = 57;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_ESCAPE: PINMAME_KEYCODE = 58;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_GRAVE_ACCENT: PINMAME_KEYCODE = 59;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_MINUS: PINMAME_KEYCODE = 60;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_EQUALS: PINMAME_KEYCODE = 61;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_BACKSPACE: PINMAME_KEYCODE = 62;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_TAB: PINMAME_KEYCODE = 63;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_LEFT_BRACKET: PINMAME_KEYCODE = 64;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_RIGHT_BRACKET: PINMAME_KEYCODE = 65;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_ENTER: PINMAME_KEYCODE = 66;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_SEMICOLON: PINMAME_KEYCODE = 67;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_QUOTE: PINMAME_KEYCODE = 68;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_BACKSLASH: PINMAME_KEYCODE = 69;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_COMMA: PINMAME_KEYCODE = 71;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_PERIOD: PINMAME_KEYCODE = 72;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_SLASH: PINMAME_KEYCODE = 73;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_SPACE: PINMAME_KEYCODE = 74;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_INSERT: PINMAME_KEYCODE = 75;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_DELETE: PINMAME_KEYCODE = 76;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_HOME: PINMAME_KEYCODE = 77;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_END: PINMAME_KEYCODE = 78;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_PAGE_UP: PINMAME_KEYCODE = 79;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_PAGE_DOWN: PINMAME_KEYCODE = 80;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_LEFT: PINMAME_KEYCODE = 81;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_RIGHT: PINMAME_KEYCODE = 82;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_UP: PINMAME_KEYCODE = 83;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_DOWN: PINMAME_KEYCODE = 84;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_KEYPAD_DIVIDE: PINMAME_KEYCODE = 85;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_KEYPAD_MULTIPLY: PINMAME_KEYCODE = 86;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_KEYPAD_SUBTRACT: PINMAME_KEYCODE = 87;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_KEYPAD_ADD: PINMAME_KEYCODE = 88;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_KEYPAD_ENTER: PINMAME_KEYCODE = 90;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_PRINT_SCREEN: PINMAME_KEYCODE = 91;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_PAUSE: PINMAME_KEYCODE = 92;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_LEFT_SHIFT: PINMAME_KEYCODE = 93;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_RIGHT_SHIFT: PINMAME_KEYCODE = 94;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_LEFT_CONTROL: PINMAME_KEYCODE = 95;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_RIGHT_CONTROL: PINMAME_KEYCODE = 96;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_LEFT_ALT: PINMAME_KEYCODE = 97;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_RIGHT_ALT: PINMAME_KEYCODE = 98;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_SCROLL_LOCK: PINMAME_KEYCODE = 99;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_NUM_LOCK: PINMAME_KEYCODE = 100;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_CAPS_LOCK: PINMAME_KEYCODE = 101;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_LEFT_SUPER: PINMAME_KEYCODE = 102;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_RIGHT_SUPER: PINMAME_KEYCODE = 103;
pub const PINMAME_KEYCODE_PINMAME_KEYCODE_MENU: PINMAME_KEYCODE = 104;
pub type PINMAME_KEYCODE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PinmameGame {
    pub name: *const ::std::os::raw::c_char,
    pub clone_of: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub year: *const ::std::os::raw::c_char,
    pub manufacturer: *const ::std::os::raw::c_char,
    pub flags: u32,
    pub found: i32,
}
#[test]
fn bindgen_test_layout_PinmameGame() {
    const UNINIT: ::std::mem::MaybeUninit<PinmameGame> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PinmameGame>(),
        48usize,
        concat!("Size of: ", stringify!(PinmameGame))
    );
    assert_eq!(
        ::std::mem::align_of::<PinmameGame>(),
        8usize,
        concat!("Alignment of ", stringify!(PinmameGame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameGame),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_of) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameGame),
            "::",
            stringify!(clone_of)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameGame),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameGame),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manufacturer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameGame),
            "::",
            stringify!(manufacturer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameGame),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).found) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameGame),
            "::",
            stringify!(found)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PinmameDisplayLayout {
    pub type_: PINMAME_DISPLAY_TYPE,
    pub top: i32,
    pub left: i32,
    pub length: i32,
    pub width: i32,
    pub height: i32,
    pub depth: i32,
}
#[test]
fn bindgen_test_layout_PinmameDisplayLayout() {
    const UNINIT: ::std::mem::MaybeUninit<PinmameDisplayLayout> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PinmameDisplayLayout>(),
        28usize,
        concat!("Size of: ", stringify!(PinmameDisplayLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<PinmameDisplayLayout>(),
        4usize,
        concat!("Alignment of ", stringify!(PinmameDisplayLayout))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameDisplayLayout),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameDisplayLayout),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameDisplayLayout),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameDisplayLayout),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameDisplayLayout),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameDisplayLayout),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameDisplayLayout),
            "::",
            stringify!(depth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PinmameAudioInfo {
    pub format: PINMAME_AUDIO_FORMAT,
    pub channels: ::std::os::raw::c_int,
    pub sampleRate: f64,
    pub framesPerSecond: f64,
    pub samplesPerFrame: ::std::os::raw::c_int,
    pub bufferSize: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PinmameAudioInfo() {
    const UNINIT: ::std::mem::MaybeUninit<PinmameAudioInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PinmameAudioInfo>(),
        32usize,
        concat!("Size of: ", stringify!(PinmameAudioInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PinmameAudioInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(PinmameAudioInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameAudioInfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameAudioInfo),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameAudioInfo),
            "::",
            stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).framesPerSecond) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameAudioInfo),
            "::",
            stringify!(framesPerSecond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplesPerFrame) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameAudioInfo),
            "::",
            stringify!(samplesPerFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSize) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameAudioInfo),
            "::",
            stringify!(bufferSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PinmameSwitchState {
    pub swNo: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PinmameSwitchState() {
    const UNINIT: ::std::mem::MaybeUninit<PinmameSwitchState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PinmameSwitchState>(),
        8usize,
        concat!("Size of: ", stringify!(PinmameSwitchState))
    );
    assert_eq!(
        ::std::mem::align_of::<PinmameSwitchState>(),
        4usize,
        concat!("Alignment of ", stringify!(PinmameSwitchState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swNo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameSwitchState),
            "::",
            stringify!(swNo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameSwitchState),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PinmameSolenoidState {
    pub solNo: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PinmameSolenoidState() {
    const UNINIT: ::std::mem::MaybeUninit<PinmameSolenoidState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PinmameSolenoidState>(),
        8usize,
        concat!("Size of: ", stringify!(PinmameSolenoidState))
    );
    assert_eq!(
        ::std::mem::align_of::<PinmameSolenoidState>(),
        4usize,
        concat!("Alignment of ", stringify!(PinmameSolenoidState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).solNo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameSolenoidState),
            "::",
            stringify!(solNo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameSolenoidState),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PinmameLampState {
    pub lampNo: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PinmameLampState() {
    const UNINIT: ::std::mem::MaybeUninit<PinmameLampState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PinmameLampState>(),
        8usize,
        concat!("Size of: ", stringify!(PinmameLampState))
    );
    assert_eq!(
        ::std::mem::align_of::<PinmameLampState>(),
        4usize,
        concat!("Alignment of ", stringify!(PinmameLampState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lampNo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameLampState),
            "::",
            stringify!(lampNo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameLampState),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PinmameGIState {
    pub giNo: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PinmameGIState() {
    const UNINIT: ::std::mem::MaybeUninit<PinmameGIState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PinmameGIState>(),
        8usize,
        concat!("Size of: ", stringify!(PinmameGIState))
    );
    assert_eq!(
        ::std::mem::align_of::<PinmameGIState>(),
        4usize,
        concat!("Alignment of ", stringify!(PinmameGIState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).giNo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameGIState),
            "::",
            stringify!(giNo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameGIState),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PinmameLEDState {
    pub ledNo: ::std::os::raw::c_int,
    pub chgSeg: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PinmameLEDState() {
    const UNINIT: ::std::mem::MaybeUninit<PinmameLEDState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PinmameLEDState>(),
        12usize,
        concat!("Size of: ", stringify!(PinmameLEDState))
    );
    assert_eq!(
        ::std::mem::align_of::<PinmameLEDState>(),
        4usize,
        concat!("Alignment of ", stringify!(PinmameLEDState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ledNo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameLEDState),
            "::",
            stringify!(ledNo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chgSeg) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameLEDState),
            "::",
            stringify!(chgSeg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameLEDState),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PinmameMechSwitchConfig {
    pub swNo: ::std::os::raw::c_int,
    pub startPos: ::std::os::raw::c_int,
    pub endPos: ::std::os::raw::c_int,
    pub pulse: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PinmameMechSwitchConfig() {
    const UNINIT: ::std::mem::MaybeUninit<PinmameMechSwitchConfig> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PinmameMechSwitchConfig>(),
        16usize,
        concat!("Size of: ", stringify!(PinmameMechSwitchConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<PinmameMechSwitchConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(PinmameMechSwitchConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swNo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechSwitchConfig),
            "::",
            stringify!(swNo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startPos) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechSwitchConfig),
            "::",
            stringify!(startPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endPos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechSwitchConfig),
            "::",
            stringify!(endPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pulse) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechSwitchConfig),
            "::",
            stringify!(pulse)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PinmameMechConfig {
    pub type_: ::std::os::raw::c_int,
    pub sol1: ::std::os::raw::c_int,
    pub sol2: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub steps: ::std::os::raw::c_int,
    pub initialPos: ::std::os::raw::c_int,
    pub acc: ::std::os::raw::c_int,
    pub ret: ::std::os::raw::c_int,
    pub sw: [PinmameMechSwitchConfig; 20usize],
}
#[test]
fn bindgen_test_layout_PinmameMechConfig() {
    const UNINIT: ::std::mem::MaybeUninit<PinmameMechConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PinmameMechConfig>(),
        352usize,
        concat!("Size of: ", stringify!(PinmameMechConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<PinmameMechConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(PinmameMechConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechConfig),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sol1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechConfig),
            "::",
            stringify!(sol1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sol2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechConfig),
            "::",
            stringify!(sol2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechConfig),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).steps) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechConfig),
            "::",
            stringify!(steps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialPos) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechConfig),
            "::",
            stringify!(initialPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechConfig),
            "::",
            stringify!(acc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ret) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechConfig),
            "::",
            stringify!(ret)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sw) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechConfig),
            "::",
            stringify!(sw)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PinmameMechInfo {
    pub type_: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub steps: ::std::os::raw::c_int,
    pub pos: ::std::os::raw::c_int,
    pub speed: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PinmameMechInfo() {
    const UNINIT: ::std::mem::MaybeUninit<PinmameMechInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PinmameMechInfo>(),
        20usize,
        concat!("Size of: ", stringify!(PinmameMechInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PinmameMechInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(PinmameMechInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechInfo),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).steps) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechInfo),
            "::",
            stringify!(steps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechInfo),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameMechInfo),
            "::",
            stringify!(speed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PinmameSoundCommand {
    pub sndNo: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PinmameSoundCommand() {
    const UNINIT: ::std::mem::MaybeUninit<PinmameSoundCommand> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PinmameSoundCommand>(),
        4usize,
        concat!("Size of: ", stringify!(PinmameSoundCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<PinmameSoundCommand>(),
        4usize,
        concat!("Alignment of ", stringify!(PinmameSoundCommand))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sndNo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameSoundCommand),
            "::",
            stringify!(sndNo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PinmameKeyboardInfo {
    pub name: *const ::std::os::raw::c_char,
    pub code: PINMAME_KEYCODE,
    pub standardcode: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_PinmameKeyboardInfo() {
    const UNINIT: ::std::mem::MaybeUninit<PinmameKeyboardInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PinmameKeyboardInfo>(),
        16usize,
        concat!("Size of: ", stringify!(PinmameKeyboardInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PinmameKeyboardInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(PinmameKeyboardInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameKeyboardInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameKeyboardInfo),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).standardcode) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameKeyboardInfo),
            "::",
            stringify!(standardcode)
        )
    );
}
pub type PinmameGameCallback = ::std::option::Option<
    unsafe extern "C" fn(p_game: *mut PinmameGame, p_userData: *const ::std::os::raw::c_void),
>;
pub type PinmameOnStateUpdatedCallback = ::std::option::Option<
    unsafe extern "C" fn(state: ::std::os::raw::c_int, p_userData: *const ::std::os::raw::c_void),
>;
pub type PinmameOnDisplayAvailableCallback = ::std::option::Option<
    unsafe extern "C" fn(
        index: ::std::os::raw::c_int,
        displayCount: ::std::os::raw::c_int,
        p_displayLayout: *mut PinmameDisplayLayout,
        p_userData: *const ::std::os::raw::c_void,
    ),
>;
pub type PinmameOnDisplayUpdatedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        index: ::std::os::raw::c_int,
        p_displayData: *mut ::std::os::raw::c_void,
        p_displayLayout: *mut PinmameDisplayLayout,
        p_userData: *const ::std::os::raw::c_void,
    ),
>;
pub type PinmameOnAudioAvailableCallback = ::std::option::Option<
    unsafe extern "C" fn(
        p_audioInfo: *mut PinmameAudioInfo,
        p_userData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type PinmameOnAudioUpdatedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        p_buffer: *mut ::std::os::raw::c_void,
        samples: ::std::os::raw::c_int,
        p_userData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type PinmameOnMechAvailableCallback = ::std::option::Option<
    unsafe extern "C" fn(
        mechNo: ::std::os::raw::c_int,
        p_mechInfo: *mut PinmameMechInfo,
        p_userData: *const ::std::os::raw::c_void,
    ),
>;
pub type PinmameOnMechUpdatedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        mechNo: ::std::os::raw::c_int,
        p_mechInfo: *mut PinmameMechInfo,
        p_userData: *const ::std::os::raw::c_void,
    ),
>;
pub type PinmameOnSolenoidUpdatedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        p_solenoidState: *mut PinmameSolenoidState,
        p_userData: *const ::std::os::raw::c_void,
    ),
>;
pub type PinmameOnConsoleDataUpdatedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        p_data: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        p_userData: *const ::std::os::raw::c_void,
    ),
>;
pub type PinmameIsKeyPressedFunction = ::std::option::Option<
    unsafe extern "C" fn(
        keycode: PINMAME_KEYCODE,
        p_userData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type PinmameOnLogMessageCallback = ::std::option::Option<
    unsafe extern "C" fn(
        logLevel: PINMAME_LOG_LEVEL,
        format: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
        p_userData: *const ::std::os::raw::c_void,
    ),
>;
pub type PinmameOnSoundCommandCallback = ::std::option::Option<
    unsafe extern "C" fn(
        boardNo: ::std::os::raw::c_int,
        cmd: ::std::os::raw::c_int,
        p_userData: *const ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PinmameConfig {
    pub audioFormat: PINMAME_AUDIO_FORMAT,
    pub sampleRate: ::std::os::raw::c_int,
    pub vpmPath: [::std::os::raw::c_char; 512usize],
    pub cb_OnStateUpdated: PinmameOnStateUpdatedCallback,
    pub cb_OnDisplayAvailable: PinmameOnDisplayAvailableCallback,
    pub cb_OnDisplayUpdated: PinmameOnDisplayUpdatedCallback,
    pub cb_OnAudioAvailable: PinmameOnAudioAvailableCallback,
    pub cb_OnAudioUpdated: PinmameOnAudioUpdatedCallback,
    pub cb_OnMechAvailable: PinmameOnMechAvailableCallback,
    pub cb_OnMechUpdated: PinmameOnMechUpdatedCallback,
    pub cb_OnSolenoidUpdated: PinmameOnSolenoidUpdatedCallback,
    pub cb_OnConsoleDataUpdated: PinmameOnConsoleDataUpdatedCallback,
    pub fn_IsKeyPressed: PinmameIsKeyPressedFunction,
    pub cb_OnLogMessage: PinmameOnLogMessageCallback,
    pub cb_OnSoundCommand: PinmameOnSoundCommandCallback,
}
#[test]
fn bindgen_test_layout_PinmameConfig() {
    const UNINIT: ::std::mem::MaybeUninit<PinmameConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PinmameConfig>(),
        616usize,
        concat!("Size of: ", stringify!(PinmameConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<PinmameConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(PinmameConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audioFormat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameConfig),
            "::",
            stringify!(audioFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameConfig),
            "::",
            stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vpmPath) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameConfig),
            "::",
            stringify!(vpmPath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_OnStateUpdated) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameConfig),
            "::",
            stringify!(cb_OnStateUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_OnDisplayAvailable) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameConfig),
            "::",
            stringify!(cb_OnDisplayAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_OnDisplayUpdated) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameConfig),
            "::",
            stringify!(cb_OnDisplayUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_OnAudioAvailable) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameConfig),
            "::",
            stringify!(cb_OnAudioAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_OnAudioUpdated) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameConfig),
            "::",
            stringify!(cb_OnAudioUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_OnMechAvailable) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameConfig),
            "::",
            stringify!(cb_OnMechAvailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_OnMechUpdated) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameConfig),
            "::",
            stringify!(cb_OnMechUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_OnSolenoidUpdated) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameConfig),
            "::",
            stringify!(cb_OnSolenoidUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_OnConsoleDataUpdated) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameConfig),
            "::",
            stringify!(cb_OnConsoleDataUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fn_IsKeyPressed) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameConfig),
            "::",
            stringify!(fn_IsKeyPressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_OnLogMessage) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameConfig),
            "::",
            stringify!(cb_OnLogMessage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_OnSoundCommand) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(PinmameConfig),
            "::",
            stringify!(cb_OnSoundCommand)
        )
    );
}
extern "C" {
    pub fn PinmameGetGame(
        p_name: *const ::std::os::raw::c_char,
        callback: PinmameGameCallback,
        p_userData: *const ::std::os::raw::c_void,
    ) -> PINMAME_STATUS;
}
extern "C" {
    pub fn PinmameGetGames(
        callback: PinmameGameCallback,
        p_userData: *const ::std::os::raw::c_void,
    ) -> PINMAME_STATUS;
}
extern "C" {
    pub fn PinmameSetConfig(p_config: *const PinmameConfig);
}
extern "C" {
    pub fn PinmameSetPath(fileType: PINMAME_FILE_TYPE, p_path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn PinmameGetCheat() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameSetCheat(cheat: ::std::os::raw::c_int);
}
extern "C" {
    pub fn PinmameGetHandleKeyboard() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameSetHandleKeyboard(handleKeyboard: ::std::os::raw::c_int);
}
extern "C" {
    pub fn PinmameGetHandleMechanics() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameSetHandleMechanics(handleMechanics: ::std::os::raw::c_int);
}
extern "C" {
    pub fn PinmameGetDmdMode() -> PINMAME_DMD_MODE;
}
extern "C" {
    pub fn PinmameSetDmdMode(dmdMode: PINMAME_DMD_MODE);
}
extern "C" {
    pub fn PinmameGetSoundMode() -> PINMAME_SOUND_MODE;
}
extern "C" {
    pub fn PinmameSetSoundMode(soundMode: PINMAME_SOUND_MODE);
}
extern "C" {
    pub fn PinmameRun(p_name: *const ::std::os::raw::c_char) -> PINMAME_STATUS;
}
extern "C" {
    pub fn PinmameIsRunning() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmamePause(pause: ::std::os::raw::c_int) -> PINMAME_STATUS;
}
extern "C" {
    pub fn PinmameIsPaused() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameReset() -> PINMAME_STATUS;
}
extern "C" {
    pub fn PinmameStop();
}
extern "C" {
    pub fn PinmameGetHardwareGen() -> PINMAME_HARDWARE_GEN;
}
extern "C" {
    pub fn PinmameGetSwitch(swNo: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameSetSwitch(swNo: ::std::os::raw::c_int, state: ::std::os::raw::c_int);
}
extern "C" {
    pub fn PinmameSetSwitches(
        p_states: *const PinmameSwitchState,
        numSwitches: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn PinmameGetSolenoidMask(low: ::std::os::raw::c_int) -> u32;
}
extern "C" {
    pub fn PinmameSetSolenoidMask(low: ::std::os::raw::c_int, mask: u32);
}
extern "C" {
    pub fn PinmameGetModOutputType(
        output: ::std::os::raw::c_int,
        no: ::std::os::raw::c_int,
    ) -> PINMAME_MOD_OUTPUT_TYPE;
}
extern "C" {
    pub fn PinmameSetModOutputType(
        output: ::std::os::raw::c_int,
        no: ::std::os::raw::c_int,
        type_: PINMAME_MOD_OUTPUT_TYPE,
    );
}
extern "C" {
    pub fn PinmameGetMaxSolenoids() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameGetSolenoid(solNo: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameGetChangedSolenoids(
        p_changedStates: *mut PinmameSolenoidState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameGetMaxLamps() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameGetLamp(lampNo: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameGetChangedLamps(p_changedStates: *mut PinmameLampState) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameGetMaxGIs() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameGetGI(giNo: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameGetChangedGIs(p_changedStates: *mut PinmameGIState) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameGetMaxLEDs() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameGetChangedLEDs(
        mask: u64,
        arg1: u64,
        p_changedStates: *mut PinmameLEDState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameGetMaxMechs() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameGetMech(mechNo: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameSetMech(
        mechNo: ::std::os::raw::c_int,
        p_mechConfig: *const PinmameMechConfig,
    ) -> PINMAME_STATUS;
}
extern "C" {
    pub fn PinmameGetMaxSoundCommands() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameGetNewSoundCommands(
        p_newCommands: *mut PinmameSoundCommand,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameGetDIP(dipBank: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PinmameSetDIP(dipBank: ::std::os::raw::c_int, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn PinmameSetUserData(p_userData: *const ::std::os::raw::c_void);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
